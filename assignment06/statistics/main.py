"""
Name: Jalen Vaughn
Date: 2/20/24
File: main.py
Description: This module contains the solution for Question 1 on Assignment 6.
Dependencies/Imports: None
"""


class Statistics:
    """
    This class is capable of calculating statistical characteristics of the list it is constructed with. The list is a
    sequence of numbers generated by input parameters.
    :param lower_bound: Start point of the list
    :param upper_bound: End point of the list
    :param step_size: Steps inbetween each value in the list
    
    Attributes:
        __values list[int]: List of numbers generated by input parameters
    """
    
    def __init__(self, lower_bound: int, upper_bound: int, step_size: int):
        """
        Constructor
        """
        self.__values: list[int] = [x for x in range(lower_bound, upper_bound + 1, abs(step_size))]
        
        # sort list by descending if step size is negative
        if step_size < 0:
            self.__values = sorted(self.__values, reverse=True)
    
    def mean(self) -> float:
        """
        Calculates the mean of the list values
        :return: Mean of the list values
        :rtype: float
        """
        return sum(self.__values) / len(self.__values)
    
    def median(self) -> float | int:
        """
        Calculates the median of the list values
        :return: Median of the list values
        :rtype: float | int
        """
        # get specific formula based on list length even/odd status
        if len(self.__values) % 2 == 0:
            # Even: return mean of two center values
            return (self.__values[len(self.__values) // 2] + self.__values[(len(self.__values) // 2) - 1]) / 2
        else:
            # Odd: return center value
            return self.__values[(len(self.__values) // 2)]
    
    def range(self) -> int:
        """
        Calculates the range of the list values
        :return: Range of the list values
        :rtype: int
        """
        return max(self.__values) - min(self.__values)
    
    def display_stats(self) -> None:
        """
        Displays all the statistical characteristics of the value list
        """
        return print(f"Values: {self.__values}\n"
                     f"Mean: {self.mean():.2f}\n"
                     f"Median: {self.median():.2f}\n"
                     f"Range: {self.range()}")


def input_int() -> int:
    """
    Gets an input from the user and returns the value if it is a validated float.
    :return: Extracted value from the user.
    :rtype: int
    """
    while True:
        user_input = input("Enter an integer: ")
        
        try:
            user_input = int(user_input)
        except ValueError:
            print(f"Invalid input: '{user_input}'. Your input is not a valid integer.")
            continue
        
        # valid float
        return user_input


def print_header(header=None) -> None:
    """
    Prints a header to the console with a given text inside
    :param header: Optional string to use for the text inside the header.
    """
    if header is None:
        print("=" * 50)
    
    else:  # calculate the correct amount of "=" and dead space to properly fit header in the center
        width = 50  # total size
        padding = (width - len(header)) // 2  # the amount of "=" signs to put on both sides
        print("=" * padding, header, "=" * padding)


def main():
    """
    Main function of the program meant to fulfill the script purpose:
    1. Gets the lower, upper, and step size from the user
    2. Validates the user input and check for logical errors.
    3. Creates a Statistic object by passing the user input as arguments.
    4. Prints the statistics to the console.
    """
    # display welcome message
    print_header("Statistics")
    print("This program calculates the mean, median, and range\n"
          "of a series of numbers generated from:\n"
          "- A start point\n"
          "- An end point (inclusive)\n"
          "- The step size between the points\n\n"
          "Note: The length of the series must be at least 3!")
    
    # start program flow
    while True:
        # obtain lower boundary from user
        print_header("Lower Boundary")
        lower_bound = input_int()
        
        # obtain upper boundary and check for errors
        print_header("Upper Boundary")
        while True:
            upper_bound = input_int()
            
            # Logic error: Lower boundary cannot be greater than Upper
            if lower_bound >= upper_bound:
                print(f"Invalid input: {upper_bound}\nUpper bound must be greater than lower bound: {lower_bound}")
                continue
            
            # upper boundary is valid
            break
        
        # obtain step size and check for errors
        print_header("Step Size")
        print(f"Positive steps start at {lower_bound} and end at {upper_bound}, inclusive.")
        print(f"Negative steps start at {upper_bound} and end at {lower_bound}, inclusive.")
        print_header()
        while True:
            step_size = input_int()
            
            # Logic error: Impossible to step by zero
            if step_size == 0:
                print(f"Invalid input: {step_size}\nStep size cannot be zero.")
                continue
            
            # step size is valid
            break
        
        # Series Validation error: Length of list must be at least 3
        if lower_bound + abs(step_size * 2) > upper_bound:
            print("Error: The combination of boundaries and step size\n"
                  "leads to a series that is too small.\n"
                  "Please enter a new set of values.")
            continue
        
        # Create Statistic object and display results
        stats = Statistics(lower_bound, upper_bound, step_size)
        print_header("Statistic Info")
        stats.display_stats()
        
        # end program
        break


# run script
main()
