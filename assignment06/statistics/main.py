"""
Name: Jalen Vaughn
Date: 2/20/24
File: main.py
Description: This module contains the solution for Question 1 on Assignment 6.
Dependencies/Imports: None
"""


class Statistics:
    """
    This class calculates statistical characteristics of a list of integers generated by a range.
    """
    
    def __init__(self):
        # display welcome message
        self.print_header("Statistics")
        print("This program calculates the mean, median, and range\n"
              "of a series of numbers generated from:\n"
              "- A start point\n"
              "- An end point (inclusive)\n"
              "- The step size between the points\n\n"
              "Note: The length of the series must be at least 3!")
        
        # obtain parameters for range object
        lower_bound, upper_bound, step_size = self.get_statistical_params()
        
        # create values with list comprehension
        self.__values: list[int] = [x for x in range(lower_bound, upper_bound + 1, abs(step_size))]
        
        # sort list by descending if step size is negative
        if step_size < 0:
            self.__values = sorted(self.__values, reverse=True)
    
    def mean(self) -> float:
        """
        Calculates the mean of the list values
        :return: Mean of the list values
        :rtype: float
        """
        return sum(self.__values) / len(self.__values)
    
    def median(self) -> float:
        """
        Calculates the median of the list values
        :return: Median of the list values
        :rtype: float
        """
        # get specific formula based on list length
        if len(self.__values) % 2 == 0:
            # Even: return mean of two center values
            return (self.__values[len(self.__values) // 2] + self.__values[(len(self.__values) // 2) - 1]) / 2
        else:
            # Odd: return center value
            return float(self.__values[(len(self.__values) // 2)])
    
    def range(self) -> int:
        """
        Calculates the range of the list values
        :return: Range of the list values
        :rtype: int
        """
        return max(self.__values) - min(self.__values)
    
    def display_stats(self) -> None:
        """
        Displays all the statistical characteristics of the value list
        """
        self.print_header("Statistic Info")
        return print(f"Values: {self.__values}\n"
                     f"Mean: {self.mean():.2f}\n"
                     f"Median: {self.median():.2f}\n"
                     f"Range: {self.range()}")
    
    def get_statistical_params(self) -> tuple[int, int, int]:
        """
        Obtains statistical parameters (lower bound, upper bound, step size) from user input
        :return: Tuple containing lower bound, upper bound, and step size
        :rtype: tuple[int, int, int]
        """
        def is_valid() -> bool:
            """
            Checks if the user input for statistical parameters is valid
            :return: True if input is valid, False otherwise
            :rtype: bool
            """
            # Logic error: Lower boundary cannot be greater than Upper
            if lower_bound >= upper_bound:
                self.error(f"Invalid input: Upper Bound\nUpper bound must be greater than lower bound: {lower_bound}")
                return False
            
            # Call error if boundaries are adjacent
            if lower_bound in [upper_bound - 1, upper_bound + 1]:
                self.error(f"Warning: The boundaries {lower_bound, upper_bound} are too close to\n"
                           "generate a valid series of numbers (minimum length of 3).")
                return False
            
            # Logic error: Impossible to step by zero
            if step_size == 0:
                self.error(f"Invalid input: Step Size\nStep size cannot be zero.")
                return False
            
            # Series Validation error: Length of list must be at least 3
            if lower_bound + abs(step_size * 2) > upper_bound:
                self.error("Warning: The combination of boundaries and step size\n"
                           "leads to a series that is too small.\n")
                return False
            
            # values are valid
            return True
        
        # obtain user input
        while True:
            # obtain lower boundary from user
            self.print_header("Lower Boundary")
            lower_bound: int = self.get_input_int()
            
            # obtain upper boundary and check for errors
            self.print_header("Upper Boundary")
            upper_bound: int = self.get_input_int()
            
            # obtain step size and check for errors
            self.print_header("Step Size")
            step_size: int = self.get_input_int()
            
            # check for logical errors in input
            if not is_valid():
                continue
            
            return lower_bound, upper_bound, step_size
    
    def error(self, msg) -> None:
        """
        Prints an error message
        :param msg: Error message to print
        """
        self.print_header("PROGRAM ERROR")
        print(msg)
    
    @staticmethod
    def get_input_int() -> int:
        """
        Gets an input from the user and returns the value if it is a validated integer.
        :return: Extracted value from the user.
        :rtype: int
        """
        while True:
            user_input: str = input("Enter an integer: ")
            
            try:
                output: int = int(user_input)
            except ValueError:
                print(f"Invalid input: '{user_input}'. Your input is not a valid integer.")
                continue
            
            # valid float
            return output
    
    @staticmethod
    def print_header(header=None) -> None:
        """
        Prints a header to the console with a given text inside
        :param header: Optional string to use for the text inside the header.
        """
        if header is None:
            print("=" * 50)
            return
        
        # calculate the correct amount of "=" and dead space to properly fit header in the center
        width: int = 50  # total size
        padding: int = (width - len(header)) // 2  # the amount of "=" signs to put on both sides
        print("=" * padding, header, "=" * padding)


def run_script() -> None:
    """
    Main function of the program meant to fulfill the script purpose:
    1. Creates a Statistics object.
    2. Gets the lower, upper, and step size from the user
    3. Validates the user input and check for logical errors.
    4. Prints the statistics to the console.
    """
    
    # Create Statistic object and display results
    stats: Statistics = Statistics()
    stats.display_stats()


run_script()
